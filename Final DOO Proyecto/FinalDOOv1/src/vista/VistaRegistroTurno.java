/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import clases.FichaMecanica;
import controlador.Controlador;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import modeloFactoryPersona.Cliente;
import modeloFactoryPersona.Empleado;

/**
 *
 * @author cirkuit
 */
public class VistaRegistroTurno extends javax.swing.JFrame implements InterfazVista{

    /**
     * Creates new form VistaRegistroTurnoBD
     */
    
    private List<Empleado> empleadoLocales;
    
    public VistaRegistroTurno() {
        initComponents();
        empleadoLocales = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        cBoxMecanicos = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cBoxEspecialidades = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        dateTimePicker = new com.github.lgooddatepicker.components.DateTimePicker();
        btnTurnoReg = new javax.swing.JButton();
        btnCargarMecanicos = new javax.swing.JButton();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registrar Turno");
        setResizable(false);

        cBoxMecanicos.setEnabled(false);

        jLabel1.setText("Mecanico:");

        jLabel3.setText("Especialidad:");

        cBoxEspecialidades.setActionCommand(InterfazVista.Operacion.ACTUALIZARMECANICOS.toString());

        jLabel2.setText("Fecha y Hora de Turno:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cBoxEspecialidades, 0, 283, Short.MAX_VALUE)
                    .addComponent(cBoxMecanicos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateTimePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cBoxEspecialidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cBoxMecanicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dateTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        btnTurnoReg.setText("Registrar Turno");
        btnTurnoReg.setActionCommand(InterfazVista.Operacion.REGISTRARTURNOBD.toString());

        btnCargarMecanicos.setText("Cargar Mecanicos");
        btnCargarMecanicos.setActionCommand(InterfazVista.Operacion.ACTUALIZARMECANICOS.toString());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCargarMecanicos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTurnoReg)
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTurnoReg)
                    .addComponent(btnCargarMecanicos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarMecanicos;
    private javax.swing.JButton btnTurnoReg;
    private javax.swing.JComboBox<String> cBoxEspecialidades;
    private javax.swing.JComboBox<String> cBoxMecanicos;
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePicker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setControlador(Controlador c) {
        this.btnTurnoReg.addActionListener(c);
        this.btnCargarMecanicos.addActionListener(c);
        c.actionPerformed(new ActionEvent(this, 0, InterfazVista.Operacion.CARGAR.toString()));
        cBoxEspecialidades.setSelectedIndex(-1);
    }

    @Override
    public void iniciaVista() {
        setLocationRelativeTo(null);
        setVisible(true);
    }

    @Override
    public String getDate() {
        try{
            String fechaFormateada;
            if(dateTimePicker.datePicker.toString().equals("") || dateTimePicker.timePicker.toString().equals("")){
                return "";
            }
            fechaFormateada = dateTimePicker.datePicker.toString();

            String temp2 = dateTimePicker.timePicker.getText();
            String dia = temp2.substring(temp2.length() - 2);
            String hora = temp2.substring(0,temp2.length() - 2);
            String hora2[] = hora.split(":");
            if("am".equals(dia) && hora2[0].equals("12")){
                fechaFormateada += " " + Integer.toString(Integer.parseInt(hora2[0])+12) + ":" + hora2[1];
            }else if("pm".equals(dia) && hora2[0].equals("12")){
                fechaFormateada += " " + hora;
            }
            if("am".equals(dia)){
                fechaFormateada += " " + hora;
            }else{
                fechaFormateada += " " + Integer.toString(Integer.parseInt(hora2[0])+12) + ":" + hora2[1];
            }
            return fechaFormateada;
        }catch(NumberFormatException ex){
            return "";
        }
    }

    @Override
    public int getDNI() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void imprimeResultado(String resultado) {
        JOptionPane.showMessageDialog(this,resultado, "Información", JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public void imprimeError(Exception e) {
        JOptionPane.showMessageDialog(this, "Ocurrio una excepción: " + e.getMessage(), "Información", JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void updateDatos(Cliente c) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public void cargarMecanicos(List<Empleado> lista,int especialidad) {
        cBoxMecanicos.removeAllItems();
        empleadoLocales.clear();
        if(especialidad == 0){
            lista.forEach(empleado -> {
                empleadoLocales.add(empleado);
                cBoxMecanicos.addItem(empleado.getNombre() + " " + empleado.getApellido());
            });
        }else{
            lista.forEach(empleado -> {
                if(empleado.getEspecialidad() == especialidad){
                    empleadoLocales.add(empleado);
                    cBoxMecanicos.addItem(empleado.getNombre() + " " + empleado.getApellido());
                }
            });
        }
    }

    @Override
    public int getMecanicoId() {
        try{
            return this.cBoxMecanicos.getSelectedIndex();
        }catch(NumberFormatException ex){
            return -1;
        }
    }
        
    @Override
    public void cargarSeguros(List<String> lista) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public String getTicket() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void cerrarVista() {
        this.setVisible(false);
        this.dispose();
    }

    @Override
    public Cliente getCliente() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void cargarLista(List<String> lista) {
        lista.forEach(especialidad -> {
            cBoxEspecialidades.addItem(especialidad);
        });
    }

    @Override
    public int getEspecialidadId() {
        try{
            return this.cBoxEspecialidades.getSelectedIndex();
        }catch(NumberFormatException ex){
            return -1;
        }
        
    }
    @Override
    public void setEnable(boolean estado){
        cBoxMecanicos.setEnabled(estado);
    }

    @Override
    public List<Empleado> getEmpleadosLocales() {
        return empleadoLocales;
    }

     @Override
    public void updateDatos(FichaMecanica f) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getString() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int getEstado() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
}
